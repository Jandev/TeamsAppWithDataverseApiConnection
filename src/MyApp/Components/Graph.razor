@using System.IO
@using Azure.Core
@using Microsoft.Graph
@using Newtonsoft.Json.Linq
@using System.Text.Json
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject IHttpClientFactory HttpClientFactory

<div>
    <h2>Get the user's profile photo</h2>
    @if (NeedConsent)
    {
        <p>Click below to authorize this app to read your profile photo using Microsoft Graph.</p>
        <FluentButton Appearance="Appearance.Accent" Disabled="@IsLoading" @onclick="ConsentAndShow">Authorize</FluentButton>
    }
    @if (IsLoading)
    {
        <ProfileCard IsLoading="true" />
    }
    else if (!string.IsNullOrEmpty(@ErrorMessage))
    {
        <div class="error">@ErrorMessage</div>
    }
    else if (Profile != null)
    {
        <ProfileCard IsLoading="false" Profile="@Profile" UserPhotoUri="@UserPhotoUri" />
    }

    <p>
        Teams user id: <pre>@_teamsUserId</pre>
    </p>
    <p>
        Dynamics user id: <pre>@_dynamicsUserId</pre>
    </p>
    <p>Get data from Dataverse!</p>
    <pre>[[apiUrlOfYourPowerPlatformEnvironment]]/accounts?$select=name,revenue&$orderby=revenue desc&$top=3</pre>
    <FluentButton Appearance="Appearance.Accent" Disabled="@IsLoading" @onclick="LoadDataverseData">Load data</FluentButton>
    <table>
        <thead>
            <tr>
                <td>
                    Name
                </td>
                <td>
                    Revenue
                </td>
            </tr>
        </thead>
        <tbody>
        @foreach (var account in _accountCollection)
        {
            <tr>
                <td>
                    @account.name
                </td>
                <td>
                    @account.revenue
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public string ErrorMessage { get; set; }

    public bool IsLoading { get; set; }
    public bool NeedConsent { get; set; }
    public User Profile { get; set; }
    public string UserPhotoUri { get; set; }

    private readonly string _scope = "User.Read";
    // Make sure the App Registration within the AAD also has the appropriate API permissions
    private string dynamicsResource = "https://[thePowerPlatformEnvironment].api.crm4.dynamics.com/";
    private string dynamicsScope = "user_impersonation";

    private string _dynamicsUserId;
    private string _teamsUserId;
    private List<Models.Dataverse.Accounts.WithRevenue.Value> _accountCollection = new();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        if (await HasPermission(_scope) && await HasPermission(dynamicsResource + dynamicsScope))
        {
            await ShowProfile();
            await ShowDynamicsUserId();
        }
    }

    private async Task ShowProfile()
    {
        IsLoading = true;
        var graph = GetGraphServiceClient();

        Profile = await graph.Me.Request().GetAsync();
        UserPhotoUri = await GetPhotoAsync(graph);
        _teamsUserId = (await graph.Me.Request().GetAsync()).Id;

        IsLoading = false;
        ErrorMessage = string.Empty;
    }

    private async Task ShowDynamicsUserId()
    {
        try
        {
            var dynamicsToken = (await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { dynamicsResource + dynamicsScope}), new System.Threading.CancellationToken())).Token;
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", dynamicsToken);
            var whoAmIResponse = await httpClient.GetAsync(dynamicsResource + "/api/data/v9.2/WhoAmI");

            if (whoAmIResponse.IsSuccessStatusCode)
            {
                JObject body = JObject.Parse(whoAmIResponse.Content.ReadAsStringAsync().Result);
                Guid userId = (Guid)body["UserId"];

                _dynamicsUserId = userId.ToString("D");
            }
            else
            {
                ErrorMessage += "Web API call failed";
                ErrorMessage += "Reason: " + whoAmIResponse.ReasonPhrase;
            }
        }
        catch (ExceptionWithCode e)
        {
            ErrorMessage = e.Message;
        }
    }

    private async Task LoadDataverseData()
    {
        var dynamicsToken = (await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { dynamicsResource + dynamicsScope}), new System.Threading.CancellationToken())).Token;
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", dynamicsToken);
        var accountsResponse = await httpClient.GetAsync(dynamicsResource + "/api/data/v9.2/accounts?$select=name,revenue&$orderby=revenue desc&$top=3");

        if (accountsResponse.IsSuccessStatusCode)
        {
            var topAccountsWithRevenue = await JsonSerializer.DeserializeAsync<Models.Dataverse.Accounts.WithRevenue.Rootobject>(
                                            await accountsResponse.Content.ReadAsStreamAsync());
            _accountCollection.Clear();
            _accountCollection.AddRange(topAccountsWithRevenue.value);
        }
        else
        {
            ErrorMessage += "Web API call failed";
            ErrorMessage += "Reason: " + accountsResponse.ReasonPhrase;
        }
    }

    private async Task ConsentAndShow()
    {
        try
        {
            await teamsUserCredential.LoginAsync(new[] { _scope, dynamicsResource + dynamicsScope });
            NeedConsent = false;
            await ShowProfile();
            await ShowDynamicsUserId();
        }
        catch (ExceptionWithCode e)
        {
            ErrorMessage = e.Message;
        }
    }

    private async Task<bool> HasPermission(string scope)
    {
        IsLoading = true;
        try
        {
            await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { _scope }), new System.Threading.CancellationToken());
            return true;
        }
        catch (ExceptionWithCode e)
        {
            if (e.Code == ExceptionCode.UiRequiredError)
            {
                NeedConsent = true;
            }
            else
            {
                ErrorMessage = e.Message;
            }

        }
        IsLoading = false;
        return false;
    }
    
    private GraphServiceClient GetGraphServiceClient()
    {
        var msGraphAuthProvider = new MsGraphAuthProvider(teamsUserCredential, _scope);
        var client = new GraphServiceClient(msGraphAuthProvider);
        return client;
    }

    private async Task<string> GetPhotoAsync(GraphServiceClient graph)
    {
        string userPhoto = "";
        try
        {
            var photoStream = await graph.Me.Photo.Content.Request().GetAsync();

            if (photoStream != null)
            {
                // Copy the photo stream to a memory stream
                // to get the bytes out of it
                var memoryStream = new MemoryStream();
                photoStream.CopyTo(memoryStream);
                var photoBytes = memoryStream.ToArray();

                // Generate a data URI for the photo
                userPhoto = $"data:image/png;base64,{Convert.ToBase64String(photoBytes)}";
            }
        }
        catch (Exception) { /* Unable to get the users photo */ }

        return userPhoto;
    }
}
